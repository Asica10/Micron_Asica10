###########################################
#   Macros
#####################################################################

#[gcode_macro G32]
#gcode:
 #   BED_MESH_CLEAR
  #  G28
   # Z_TILT_ADJUST
   # G28

 #  G0 X150 Y170 Z30 F3600 #changed Y position due to damaged PEI




#####################################################################
#   soak macros
#####################################################################

[gcode_macro soak_60]
gcode:
 STATUS_HOMING                                       # Sets LEDs to homing-mode
 G28
 SET_FAN_SPEED FAN=filter SPEED=1                    # Turn on Filter
 SET_FAN_SPEED FAN=bed_fan SPEED=0.5                 # Turn on Bed_Fan
 M106 S200                                           # Turn on part cooling fan
 SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150   # Heat hotend to 150c
 SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60  # Heat bed to 60c 
 QUAD_GANTRY_LEVEL 
 G28

[gcode_macro soak_95]
gcode:
 STATUS_HOMING                                       # Sets LEDs to homing-mode
 G28
 SET_FAN_SPEED FAN=filter SPEED=1                    # Turn on Filter
 SET_FAN_SPEED FAN=bed_fan SPEED=0.5                 # Turn on Bed_Fan
 M106 S200                                           # Turn on part cooling fan
 SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150   # Heat hotend to 150c
 SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=95  # Heat bed to 95c 
 QUAD_GANTRY_LEVEL 
 G28

    
#####################################################################
#   print_start macro
#####################################################################

[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("35")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  SET_GCODE_OFFSET Z=0                                # Set offset to 0
  # Homes the printer, sets absolute positioning and updates the toolhead leds.
  STATUS_HOMING                                       # Sets LEDs to homing-mode
  G28                                                 # Home XY
  MPC_SET_MATERIAL MATERIAL={params.MATERIAL}         # Material Set for MPC
  BED_MESH_CLEAR                                      # Clears old saved bed mesh (if any)


  # Checks if the bed temp is higher than 80c - if so then trigger a heatsoak.
  {% if params.BED|int > 80 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    STATUS_HEATING                                      # Sets LEDs to heating-mode

    G1 X{x_wait} Y{y_wait} Z30 F9000                    # Goes to center of the bed
    M106 S255                                           # Turn on part cooling
    SET_FAN_SPEED FAN=filter SPEED=1                    # Turn on Filter
    SET_FAN_SPEED FAN=bed_fan SPEED=0.5                   # Turn on Bed_fan
    M190 S{target_bed}                                  # Sets the target temp for the bed    
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Displays info
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber_gantry" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp

     
  # If the bed temp is not over 80c, then it skips the heatsoak and just heats up to set temp with a 2min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    STATUS_HEATING                                      # Sets LEDs to heating-mode
    G1 X{x_wait} Y{y_wait} Z30 F9000                    # Goes to center of the bed
    SET_FAN_SPEED FAN=filter SPEED=1                    # Turn on Filter
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 2min"                # Displays info
    G4 P60000                                          # Waits 1 min for the bedtemp to stabilize
                          
  {% endif %}


 # Heat hotend to 150c. This helps with getting a correct Z-home.
  SET_DISPLAY_TEXT MSG="Hotend: 150c"                   # Display info on display
  M109 S150                                             # Heat hotend to 170c

  #Quad gantry level AKA QGL
  SET_DISPLAY_TEXT MSG="Leveling"                       # Display info on display
  STATUS_LEVELING                                       # Set LEDs to leveling-mode
  QUAD_GANTRY_LEVEL                                     # Level the printer via QGL
  G28 Z                                                 # Home Z again after QGL
  Clean_nozzle


  #  For bed mesh 
  SET_DISPLAY_TEXT MSG="Bed mesh"                      # Display info on display
  STATUS_MESHING                                       # Set LEDs to bed mesh-mode
  BED_MESH_CALIBRATE                                   # Start the bed mesh (add ADAPTIVE=1) for adaptive bed mesh
  CARTOGRAPHER_TOUCH                                   # Calibrate z offset only with hot nozzle
               
  
  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"    # Displays info
  STATUS_HEATING                                       # Set LEDs to heating-mode
  G1 X{x_wait} Y{y_wait} Z15 F9000                     # Go to center of the bed
  M107                                                 # Turn off partcooling fan
  G1 X19 Y190 F9000
  G1 Z1 F9000
  M109 S{target_extruder}                              # Heat the hotend to set temp


  # Gets ready to print by doing a p urge line and updating the LEDs
  SET_DISPLAY_TEXT MSG="Printer goes brr"              # Displays info
  STATUS_PRINTING                                      # Sets SB-leds to printing-mode                                     
  Clean_nozzle
  G0 X{x_wait - 50} Y4 F10000                          # Go to starting point
  G0 Z0.4                                               # Raise Z to 0.4
  G91                                                   # Incremental positioning 
  ADAPTIVE_PURGE_LINE
  G90


[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 20, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-1.0 F3600                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    #G1 X150 Y250 F9000
    #G1 X150 Y309 F9000
    G1 X19 Y190 F9000                        # Goes under nozzle parking place
    M18                                      ; turn off steppers
    M106 S255                   # Turn on part cooling fan for cooling nozzle
    G4 S60                      # Wait for 60 seconds
    M106 S0
    SET_FAN_SPEED FAN=filter SPEED=0                  # Turn off Filter
    SET_FAN_SPEED FAN=bed_fan SPEED=0                # Turn off Bed Fan
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END


#####################################################################
#   clean_nozzle macro
######################################################################
[gcode_macro clean_nozzle]

# If you want the purging routine in your bucket enabled, set to True (and vice versa).
variable_enable_purge:              True

# These parameters define your filament purging. The retract variable is used to retract right after purging to prevent unnecessary
# oozing. Some filament are particularly oozy and may continue to ooze out of the nozzle for a second or two after retracting. The
# ooze dwell variable makes allowance for this. Update as necessary. If you decided to not enable purge, you can ignore this section.
variable_purge_len:            20	         ; Amount of filament, in mm, to purge.
variable_purge_spd:           100	         ; Speed, in mm/min, of the purge.
variable_purge_temp_min:      195	         ; Minimum nozzle temperature to permit a purge. Otherwise, purge will not occur.
variable_purge_ret:             2            ; Retract length, in mm, after purging to prevent slight oozing. Adjust as necessary.
variable_ooze_dwell:            2            ; Dwell/wait time, in seconds, after purging and retracting.

# Adjust this so that your nozzle scrubs within the brush. Currently defaulted to be a lot higher for safety. Be careful not to go too low!
variable_brush_top:             1   

# These parameters define your scrubbing, travel speeds, safe z clearance and how many times you want to wipe. Update as necessary. Wipe 
# direction is randomized based off whether the left or right bucket is randomly selected in the purge & scrubbing routine.
variable_clearance_z:           10	         ; When traveling, but not cleaning, the clearance along the z-axis between nozzle and brush.
variable_wipe_qty:              20	         ; Number of complete (A complete wipe: left, right, left OR right, left, right) wipes.
variable_prep_spd_xy:        5000	         ; Travel (not cleaning) speed along x and y-axis in mm/min.
variable_prep_spd_z:         1500	         ; Travel (not cleaning) speed along z axis in mm/min.
variable_wipe_spd_xy:        10000	         ; Nozzle wipe speed in mm/min.


# These parameters define the size of the brush. Update as necessary. A visual reference is provided below. Note that orientation of 
# parameters remain the same whether bucket is at rear or front.
# 
#                  ←   brush_width   →                            
#                   _________________                                                          
#                  |                 |  ↑                     
#  brush_start (x) |                 | brush_depth            
#                  |_________________|  ↓                                    
#                          (y)                                                                 
#                      brush_front
# __________________________________________________________
#                     PRINTER FRONT
# 
# 
# Brush dimension  
variable_brush_start:    89
variable_brush_width:    36
variable_brush_front:    187          
variable_brush_depth:    5        


# These parameters define the size of your purge bucket. Update as necessary. If you decided to not enable purge, you can ignore 
# this section. A visual reference is provided below. Note that orientation of parameters remain the same whether bucket is at rear 
# or front.
#                                  
#                                     
#                     _________________
#                    |                 |
#                    |                 |
#  bucket_start (x)  |                 |
#                    |                 |      
#                    |                 |
#                    |_________________|
#                     ← ------------- →        
#                     bucket__width (till brush)     
#  _______________________________________________________________________________________
#                                    PRINTER FRONT
# 
variable_bucket_start: 55
variable_bucket_width: 25

gcode:
    # First, check if the axes are homed.
    {% if "xyz" in printer.toolhead.homed_axes %}
        # Save the gcode state in this macro instance.
        SAVE_GCODE_STATE NAME=clean_nozzle

        # Set to absolute positioning.
        G90
        
        ## Grab max position of Y-axis from config to use in setting a fixed y position for location_bucket_rear = True.
        {% set Ry = printer.configfile.config["stepper_y"]["position_max"]|float %}
        
        # Check if user enabled purge option or not.
        {% if enable_purge %}
            # Raise Z for travel.
            G1 Z{brush_top + clearance_z} F{prep_spd_z}

            # Position for purge.
            G1 X{bucket_start + (bucket_width / 2)} F{prep_spd_xy} #for bucket on left side of brush
            #G1 X{bucket_start - (bucket_width / 2)} F{prep_spd_xy} #for bucket on right side of brush
            G1 Y{Ry - 1} F{prep_spd_xy}
            M106 S150 # Turn on part cooling

            # Perform purge if the temp is up to min temp. If not, it will skip and continue executing rest of macro. Small retract after
            # purging to minimize any persistent oozing at 5x purge_spd. G4 dwell is in milliseconds, hence * 1000 in formula.
            {% if printer.extruder.temperature >= purge_temp_min %}
                M83      ; relative mode
                G1 E{purge_len} F{purge_spd}
                G1 E-{purge_ret} F{purge_spd * 5}
                G4 P{ooze_dwell * 1000}
                G92 E0   ; reset extruder
                M106 S0 # Turn off part cooling
            {% endif %}
        {% endif %}
        
        # Move nozzle down into brush.
        G1 Z{brush_top} F{prep_spd_z}
        G1 Y{brush_front} F{prep_spd_xy}  ; Ensure we start at the brush front
   
        # Perform wipe. Wipe direction based off bucket_pos for cool random scrubby routine.
        {% set current_y = brush_front %}
        {% for wipe in range(wipe_qty) %}
            G1 X{brush_start + brush_width} F{wipe_spd_xy}
            G1 Y{current_y + ((wipe + 1) * (brush_depth / wipe_qty))} F{wipe_spd_xy}
            G1 X{brush_start} F{wipe_spd_xy}
        {% endfor %}
   
        # Clear from area.
        M117 Cleaned!
        G1 Z{brush_top + clearance_z} F{prep_spd_z}

        # Restore the gcode state to how it was before the macro.
        RESTORE_GCODE_STATE NAME=clean_nozzle

    {% else %}
        # raise error will stop any macros that clean_nozzle is referenced in from proceeding for safety.
        { action_raise_error("Please home your axes!") }
        M117 Please home first!
    {% endif %}

    
#####################################################################
#   hotend fan rpm monitoring
######################################################################
# Author: alch3my#9819
# Requires a 3-wire fan with tachometer_pin defined. https://www.klipper3d.org/Config_Reference.html#heater_fan
# The tach wire can be connected to a spare endstop pin. 
# Don't forget a pullup (^) on the tach pin (example: tachometer_pin: ^P1.29)

# Monitoring loop. Begins at Klipper start.
[delayed_gcode CHECK_ALL_FANS]
initial_duration: 1
gcode:
    HOTEND_FAN_CHECK
    UPDATE_DELAYED_GCODE ID=CHECK_ALL_FANS DURATION=3

# Change min_rpm and max_consecutive_stops to your desired values.
[gcode_macro HOTEND_FAN_CHECK]
variable_he_stop_count: 0
gcode:
    {% set min_rpm = 8000|float %}
    {% set max_consecutive_stops = 3 %}
    {% set rpm = printer['heater_fan hotend_fan'].rpm|float %}
    {% set he_target = printer[printer.toolhead.extruder].target|float %}
    {% set he_temp = printer[printer.toolhead.extruder].temperature|float %}
    {% set fan_on_temp = printer.configfile.settings['heater_fan hotend_fan'].heater_temp|float %}
    {% set he_stop_count = printer["gcode_macro HOTEND_FAN_CHECK"].he_stop_count|int %}

    {% if (he_target >= fan_on_temp) and (rpm < min_rpm) and (he_temp >= fan_on_temp) %}
        SET_GCODE_VARIABLE MACRO=HOTEND_FAN_CHECK VARIABLE=he_stop_count VALUE={he_stop_count + 1}
        M118 WARNING: Fan stoppage detected ({he_stop_count+1}/{max_consecutive_stops}).
        M400
        {% if printer["gcode_macro HOTEND_FAN_CHECK"].he_stop_count|int >= max_consecutive_stops-1 %}
            FAN_STOPPAGE_ROUTINE
        {% endif %}
    {% else %}
        SET_GCODE_VARIABLE MACRO=HOTEND_FAN_CHECK VARIABLE=he_stop_count VALUE=0
    {% endif %}

# Insert the gcode that you want to run when a fan stoppage is detected.
# This runs every ~3 seconds until the stop conditions are cleared.
[gcode_macro FAN_STOPPAGE_ROUTINE]
gcode:
    # If not already paused
    {% if printer['pause_resume'].is_paused|int == 0 %}
        M117 !!FAN STOPPAGE!!
        M118 FAN STOPPAGE DETECTED. PAUSING...
        PAUSE
        # Turn off the hotend. 
        # !! Don't forget to turn your hotend back on before resume. !!
        # -- If using this guide's pause/resume macros (in useful_macros.html), the hotend will automatically reheat on resume
        # -- (as long as the hotend is not turned off BEFORE pause is called)
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
    {% endif %}
    


#####################################################################
#   Test_speed for ellis
#####################################################################

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} #ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED


#####################################################################
#   MPC material set
#####################################################################

[gcode_macro MPC_SET_MATERIAL]
description: Set heater MPC parameters for a given material
variable_filament_table:
    ## Update this table to adjust material settings
    {
        ## ( density, heat capacity )  # suggested heat capacity range
        "PLA"       : ( 1.25, 2.20 ),  # 1.80 - 2.20
        "PETG"      : ( 1.27, 2.20 ),  # 1.70 - 2.20
        "PC+ABS"    : ( 1.15, 2.20 ),  # 1.50 - 2.20
        "ABS"       : ( 1.06, 2.40 ),  # 1.25 - 2.40
        "ASA"       : ( 1.07, 2.10 ),  # 1.30 - 2.10
        "PA6"       : ( 1.12, 2.50 ),  # 2.00 - 2.50
        "PA"        : ( 1.15, 2.50 ),  # 2.00 - 2.50
        "PC"        : ( 1.20, 1.90 ),  # 1.10 - 1.90
        "PC-PBT"    : ( 1.20, 1.90 ),  # 1.10 - 1.90 // No data - The same like for PC
        "TPU"       : ( 1.21, 2.00 ),  # 1.50 - 2.00
        "TPU-90A"   : ( 1.15, 2.00 ),  # 1.50 - 2.00
        "TPU-95A"   : ( 1.22, 2.00 ),  # 1.50 - 2.00
        "ABS-CF"    : ( 1.11, 2.40 ),  # 1.25 - 2.40
        "ASA-CF"    : ( 1.11, 2.10 ),  # 1.30 - 2.10
        "PA6-CF"    : ( 1.19, 2.50 ),  # 2.00 - 2.50
        "PC+ABS-CF" : ( 1.22, 2.20 ),  # 1.50 - 2.20
        "PC+CF"     : ( 1.36, 1.90 ),  # 1.10 - 1.90
        "PLA-CF"    : ( 1.29, 2.20 ),  # 1.80 - 2.20
        "PETG-CF"   : ( 1.30, 2.20 ),  # 1.70 - 2.20
    }
gcode:
    {% set material = params.MATERIAL | upper %}
    {% set heater = params.HEATER | default('extruder') %}
    {% set extruder_config = printer.configfile.settings[heater] %}
        
    {% if material in filament_table %}
        {% set (density, heat_capacity) = filament_table[material] %}

        RESPOND PREFIX=🔥 MSG="Configured {heater} MPC for {material}. Density: {density}, Heat Capacity: {heat_capacity}"
    {% else %}
        {% set density = extruder_config.filament_density %}
        {% set heat_capacity=extruder_config.filament_heat_capacity %}

        RESPOND PREFIX=🔥 MSG="Unknown material '{material}', using default mpc parameters for {heater}"
    {% endif %}

    MPC_SET HEATER={heater} FILAMENT_DENSITY={density} FILAMENT_HEAT_CAPACITY={heat_capacity}

#####################################################################
#   Purge line - from KAMP
#####################################################################

[gcode_macro ADAPTIVE_PURGE_LINE]
description: "Dynamic purge line with flow and speed calculation, using purge height"
gcode:
    {% set travel_speed = 100000 %}  # Maximum travel speed
    {% set purge_margin = 10 %}  # Margin from the object bounds
    {% set purge_height = 0.8 %}  # Height for the purge line
    {% set purge_length = 25 %}  # Length of the purge line
    {% set purge_amount = 30 %}  # Amount of filament to extrude (in mm³)
    {% set flow_rate = 5 %}  # Flow rate in mm³/s
    {% set nozzle_diameter = 0.4 %}  # Nozzle width in mm

    # Calculate cross-sectional area (based on purge height)
    {% set cross_section = nozzle_diameter * purge_height %}

    # Calculate purge speed (to not exceed flow rate)
    {% set purge_speed = (flow_rate * 60) / cross_section %}

    # Calculate object bounds
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
    {% set obj_x_min = (all_points | map(attribute=0) | min | default(10)) %}
    {% set obj_y_min = (all_points | map(attribute=1) | min | default(10)) %}

    # Define purge position
    {% set purge_x_start = obj_x_min - purge_margin %}
    {% set purge_y_start = obj_y_min - purge_margin %}

    # Ensure purge position is within bounds
    {% set purge_x_start = ([purge_x_start, 0] | max) %}
    {% set purge_y_start = ([purge_y_start, 0] | max) %}

    # Perform purge line
    SAVE_GCODE_STATE NAME=purge_state
    G92 E0
    G90
    G0 X{purge_x_start} Y{purge_y_start} F{travel_speed}
    G0 Z{purge_height}
    M83  # Use relative extrusion mode
    G1 E0.5 F{purge_speed}  # Initial small extrusion to prepare nozzle
    G1 X{purge_x_start + purge_length} E{purge_amount} F{purge_speed}
    G92 E0
    G0 Z2.0 F{travel_speed}
    M82  # Return to absolute extrusion mode
    RESTORE_GCODE_STATE NAME=purge_state
